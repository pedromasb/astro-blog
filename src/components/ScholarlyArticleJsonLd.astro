---
const {
  title,
  description,
  pubDate,
  updatedDate,
  authors = [],
  doi,
  url,
  arxiv,
  journal,
  volume,
  pages,
} = Astro.props;

const data = {
  "@context": "https://schema.org",
  "@type": "ScholarlyArticle",
  headline: title,
  name: title,
  description,
  datePublished: pubDate ? new Date(pubDate).toISOString() : undefined,
  dateModified: updatedDate ? new Date(updatedDate).toISOString() : undefined,
  author: authors?.length
    ? authors.map((a) => ({
        "@type": "Person",
        name: a.name,
        identifier: a.orcid ? `https://orcid.org/${a.orcid}` : undefined,
      }))
    : undefined,
  isPartOf: journal
    ? { "@type": "Periodical", name: journal, volumeNumber: volume, pagination: pages }
    : undefined,
  identifier: [
    doi ? { "@type": "PropertyValue", propertyID: "doi", value: doi } : undefined,
    arxiv ? { "@type": "PropertyValue", propertyID: "arXiv", value: arxiv } : undefined,
  ].filter(Boolean),
  sameAs: [
    doi ? `https://doi.org/${doi}` : undefined,
    arxiv ? `https://arxiv.org/abs/${arxiv}` : undefined,
  ].filter(Boolean),
  url: url,
};
---
<script type="application/ld+json" set:html={JSON.stringify(data)} />