---
import { SITE } from "@config";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import Layout from "./Layout.astro";

export interface Props {
  title?: string;
  description?: string;
  frontmatter?: {
    title: string;
    description?: string;
  };
}

const { title, description, frontmatter } = Astro.props;
const pageTitle = (title ?? frontmatter?.title ?? "Doctoral Thesis");
const pageDesc  = (description ?? frontmatter?.description ?? "PhD thesis — details and abstract");
---

<Layout title={`${pageTitle} | ${SITE.title}`} description={pageDesc}>
  <Header activeNav="thesis" />

  <main id="main-content" class="mx-auto max-w-3xl px-4 pb-12">
    <!-- Match site-wide title style -->
    <h1 class="text-3xl mt-5 mb-8 font-semibold">{pageTitle}</h1>

    <!-- Meta (transparent "card": only border) -->
    <section class="rounded-2xl border border-skin-line/40 shadow-none mb-8">
      <div class="p-5 sm:p-6">
        <slot name="meta" />
      </div>
    </section>

    <section class="thesis-chat mb-10 max-w-2xl mx-auto">
      <h2 class="text-xl sm:text-2xl font-semibold mb-4 text-center">
        Talk with my thesis
      </h2>

      <!-- Chat form -->
      <form id="thesis-form" class="flex gap-2 items-center">
        <input
          type="text"
          id="thesis-query"
          name="query"
          placeholder="Ask about J-PLUS, CARMENES, UCDs…"
          class="flex-1 rounded-lg border border-skin-line px-3 py-2
                text-sm sm:text-base focus:outline-none focus:border-gray-400
                bg-transparent placeholder:text-gray-600 dark:placeholder:text-gray-300"
        />
        <button
          type="submit"
          class="rounded-lg border border-skin-line px-4 py-2
                text-sm sm:text-base font-medium transition-all duration-200 transform
                hover:bg-gray-200/40 dark:hover:bg-gray-700/40 hover:scale-105"
        >
          Ask
        </button>
      </form>

      <!-- Answer container -->
      <div id="thesis-answer" class="mt-6 text-base leading-relaxed"></div>

      <script type="module">
        import { marked } from "https://cdn.jsdelivr.net/npm/marked@12.0.2/lib/marked.esm.js";
        const form = document.getElementById("thesis-form");
        const input = document.getElementById("thesis-query");
        const answerBox = document.getElementById("thesis-answer");

        function asPath(md = {}) {
          const parts = [];
          if (md.chapter_key || md.chapter) parts.push(`Ch.${md.chapter_key ?? ""}: ${md.chapter ?? ""}`.trim());
          if (md.section_key || md.section) parts.push(`S.${md.section_key ?? ""}: ${md.section ?? ""}`.trim());
          if (md.subsection_key || md.subsection) parts.push(`SS.${md.subsection_key ?? ""}: ${md.subsection ?? ""}`.trim());
          return parts.filter(p => p && !p.endsWith(":")).join(" | ");
        }

        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const query = input.value.trim();
          if (!query) return;

          // reset UI
          answerBox.innerHTML = `<div class="text-skin-muted">Thinking…</div>`;

          try {
            const resp = await fetch("/api/ask", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ query }),
            });
            const data = await resp.json();

            if (!resp.ok) {
              throw new Error(data.error || resp.statusText);
            }

            // Render answer (Markdown → HTML)
            const rawAnswer = data.answer || "No answer.";
            const answerHtml = marked.parse(rawAnswer);

            // Render sources as numbered list
            const sources = Array.isArray(data.sources) ? data.sources : [];
            const listItems = sources.map((s, i) => {
              const label = s.path || asPath(s.meta ?? s.metadata ?? {}) || "(no path)";
              const snippet = s.preview ? `<div class="text-skin-muted italic">${s.preview}</div>` : "";
              return `<li class="mb-2">[${i + 1}] ${label}${snippet}</li>`;
            }).join("");

            const sourcesHtml = sources.length
              ? `<div class="mt-4">
                  <div class="text-sm font-semibold mb-1">Sources</div>
                  <ol class="list-decimal pl-5 text-sm leading-relaxed">${listItems}</ol>
                </div>`
              : "";

            answerBox.innerHTML = `<div class="prose prose-neutral dark:prose-invert">${answerHtml}</div>${sourcesHtml}`;
          } catch (err) {
            answerBox.innerHTML = `<div class="text-red-600 text-sm">Error: ${err.message}</div>`;
          }
        });
      </script>
    </section>

    <!-- Collapsible Abstract (transparent "card": only border) -->
    <section class="rounded-2xl border border-skin-line/40 shadow-none mb-10" aria-labelledby="abstract-heading">
      <div class="p-5 sm:p-6">
        <div class="flex items-center justify-between mb-3">
          <h2 id="abstract-heading" class="text-xl sm:text-2xl font-semibold">Abstract</h2>
          <button
            id="abstract-toggle"
            class="flex items-center gap-2 rounded-lg border border-skin-line px-3 py-1.5
                   text-sm font-medium transition-all duration-200 transform
                   hover:bg-gray-200/40 dark:hover:bg-gray-700/40 hover:scale-105"
            aria-expanded="false"
            aria-controls="abstract-content"
          >
            <span class="toggle-text">Read abstract</span>
            <svg
              class="toggle-icon w-4 h-4 transition-transform duration-200"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
              stroke-width="2"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7" />
            </svg>
          </button>
        </div>
        
        <!-- Collapsible content area -->
        <div
          id="abstract-content"
          role="region"
          aria-label="Abstract content"
          class="abstract-content"
          aria-hidden="true"
        >
          <div class="abstract-inner font-serif leading-relaxed prose prose-neutral dark:prose-invert max-w-none">
            <slot name="abstract" />
          </div>
        </div>
      </div>

      <script type="module">
        // Handle abstract toggle
        const toggleBtn = document.getElementById('abstract-toggle');
        const abstractContent = document.getElementById('abstract-content');
        const toggleText = toggleBtn?.querySelector('.toggle-text');
        const toggleIcon = toggleBtn?.querySelector('.toggle-icon');
        
        if (toggleBtn && abstractContent && toggleText) {
          // Set initial state (collapsed)
          abstractContent.style.maxHeight = '0';
          abstractContent.style.overflow = 'hidden';
          abstractContent.style.transition = 'max-height 0.3s ease-in-out';
          
          toggleBtn.addEventListener('click', () => {
            const isExpanded = toggleBtn.getAttribute('aria-expanded') === 'true';
            
            if (isExpanded) {
              // Collapse
              abstractContent.style.maxHeight = '0';
              abstractContent.setAttribute('aria-hidden', 'true');
              toggleBtn.setAttribute('aria-expanded', 'false');
              toggleText.textContent = 'Read abstract';
              toggleIcon?.classList.remove('rotate-180');
            } else {
              // Expand
              abstractContent.style.maxHeight = abstractContent.scrollHeight + 'px';
              abstractContent.setAttribute('aria-hidden', 'false');
              toggleBtn.setAttribute('aria-expanded', 'true');
              toggleText.textContent = 'Hide abstract';
              toggleIcon?.classList.add('rotate-180');
              
              // After expansion completes, set to auto for responsive height
              setTimeout(() => {
                if (toggleBtn.getAttribute('aria-expanded') === 'true') {
                  abstractContent.style.maxHeight = 'none';
                  abstractContent.style.overflow = 'auto';
                  abstractContent.classList.add('max-h-[28rem]', 'overflow-y-auto', 'pr-1');
                }
              }, 300);
            }
          });
          
          // Before collapsing, need to set explicit height
          abstractContent.addEventListener('transitionstart', () => {
            if (toggleBtn.getAttribute('aria-expanded') === 'false' && abstractContent.style.maxHeight === 'none') {
              abstractContent.style.maxHeight = abstractContent.scrollHeight + 'px';
              abstractContent.classList.remove('max-h-[28rem]', 'overflow-y-auto', 'pr-1');
              abstractContent.style.overflow = 'hidden';
              // Force reflow
              abstractContent.offsetHeight;
              abstractContent.style.maxHeight = '0';
            }
          });
        }

        // Markdown rendering for abstract content if needed
        document.addEventListener('DOMContentLoaded', () => {
          const abstractInner = document.querySelector('.abstract-inner');
          if (abstractInner) {
            // Check if content needs markdown parsing (if it contains markdown syntax)
            const content = abstractInner.textContent || '';
            if (content.includes('**') || content.includes('*') || content.includes('#') || content.includes('[')) {
              import('https://cdn.jsdelivr.net/npm/marked@12.0.2/lib/marked.esm.js').then(({ marked }) => {
                const html = marked.parse(content);
                abstractInner.innerHTML = html;
              });
            }
          }
        });
      </script>
    </section>

    <!-- Optional extra content below -->
    <section class="prose prose-neutral dark:prose-invert max-w-none mt-10">
      <slot />
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Make ThesisAsk look like a chat box without changing its JSX */
  .thesis-chat {
    /* no background; border already on parent section */
  }

  /* Normalize headings inside LLM output */
  .thesis-chat .prose h3,
  .thesis-chat .prose h4 {
    @apply mt-3 mb-2;
  }

  /* Input + button inside ThesisAsk → "chat bar" vibe */
  .thesis-chat input[type="text"],
  .thesis-chat input:not([type]),
  .thesis-chat textarea {
    @apply w-full rounded-xl border border-skin-line/60 bg-transparent
           px-3 py-2 outline-none
           focus-visible:ring-1 focus-visible:ring-gray-400 dark:focus-visible:ring-gray-600;
  }

  .thesis-chat button {
    @apply rounded-xl border border-skin-line/60 bg-transparent
           px-4 py-2 transition-all duration-200 transform
           hover:bg-gray-200/40 dark:hover:bg-gray-700/40 hover:scale-105;
  }

  /* Typical layout for an input row (if ThesisAsk uses a flex row) */
  .thesis-chat .flex.gap-2,
  .thesis-chat .flex.gap-3 {
    @apply items-center;
  }

  /* If ThesisAsk prints "Answer" and "Sources", space them nicely */
  .thesis-chat h3,
  .thesis-chat h4 {
    @apply text-base font-semibold;
  }
  .thesis-chat ol {
    @apply list-decimal pl-5;
  }

  .thesis-chat ol li div {
    font-size: 0.875rem; /* small */
    line-height: 1.4;
  }

  /* Rotate animation for toggle icon */
  .toggle-icon {
    transition: transform 0.2s ease-in-out;
  }
  
  .toggle-icon.rotate-180 {
    transform: rotate(180deg);
  }

  /* Abstract content animation */
  .abstract-content {
    transition: max-height 0.3s ease-in-out;
  }

  /* Scrollbar for abstract (only where supported) */
  @supports selector(::-webkit-scrollbar) {
    .abstract-content[aria-expanded="true"] [role="region"]::-webkit-scrollbar,
    .abstract-inner::-webkit-scrollbar { 
      width: 8px; 
    }
    .abstract-content[aria-expanded="true"] [role="region"]::-webkit-scrollbar-thumb,
    .abstract-inner::-webkit-scrollbar-thumb {
      background: color-mix(in oklab, currentColor 20%, transparent);
      border-radius: 8px;
    }
  }
</style>