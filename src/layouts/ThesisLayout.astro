---
import { SITE } from "@config";
import Footer from "@components/Footer.astro";
import Header from "@components/Header.astro";
import Layout from "./Layout.astro";

export interface Props {
  title?: string;
  description?: string;
  frontmatter?: {
    title: string;
    description?: string;
  };
}

const { title, description, frontmatter } = Astro.props;
const pageTitle = (title ?? frontmatter?.title ?? "Doctoral Thesis");
const pageDesc  = (description ?? frontmatter?.description ?? "PhD thesis — details and abstract");
---

<Layout title={`${pageTitle} | ${SITE.title}`} description={pageDesc}>
  <Header activeNav="thesis" />

  <main id="main-content" class="mx-auto max-w-3xl px-4 pb-12">
    <!-- Match site-wide title style -->
    <h1 class="text-3xl mt-5 font-semibold">{pageTitle}</h1>

    <!-- Meta (transparent “card”: only border) -->
    <section class="rounded-2xl border border-skin-line/40 shadow-none mb-8">
      <div class="p-5 sm:p-6">
        <slot name="meta" />
      </div>
    </section>

    <!-- Abstract (transparent “card”: only border) -->
    <section class="rounded-2xl border border-skin-line/40 shadow-none mb-10" aria-labelledby="abstract-heading">
      <div class="p-5 sm:p-6">
        <h2 id="abstract-heading" class="text-xl sm:text-2xl font-semibold mb-3">Abstract</h2>
        <!-- Scrollable area -->
        <div
          role="region"
          aria-label="Abstract content"
          class="max-h-[28rem] overflow-y-auto pr-1 font-serif leading-relaxed"
        >
          <slot name="abstract" />
        </div>
      </div>
    </section>

    <section class="thesis-chat mt-12 max-w-2xl mx-auto">
      <h2 class="text-xl sm:text-2xl font-semibold mb-4 text-center">
        Talk with my thesis
      </h2>

      <!-- Chat form -->
      <form id="thesis-form" class="flex gap-2 items-center">
        <input
          type="text"
          id="thesis-query"
          name="query"
          placeholder="Ask about J-PLUS, CARMENES, UCDs…"
          class="flex-1 rounded-lg border border-skin-line px-3 py-2
                text-sm sm:text-base focus:outline-none focus:border-gray-400
                bg-transparent"
        />
        <button
          type="submit"
          class="rounded-lg border border-skin-line px-4 py-2
                text-sm sm:text-base font-medium transition
                hover:bg-gray-200/40 dark:hover:bg-gray-700/40"
        >
          Ask
        </button>
      </form>

      <!-- Answer container -->
      <div id="thesis-answer" class="mt-6 text-base leading-relaxed"></div>

      <script>
        const form = document.getElementById("thesis-form");
        const input = document.getElementById("thesis-query");
        const answerBox = document.getElementById("thesis-answer");

        function asPath(md = {}) {
          const parts = [];
          if (md.chapter_key || md.chapter) parts.push(`Ch.${md.chapter_key ?? ""}: ${md.chapter ?? ""}`.trim());
          if (md.section_key || md.section) parts.push(`S.${md.section_key ?? ""}: ${md.section ?? ""}`.trim());
          if (md.subsection_key || md.subsection) parts.push(`SS.${md.subsection_key ?? ""}: ${md.subsection ?? ""}`.trim());
          return parts.filter(p => p && !p.endsWith(":")).join(" | ");
        }

        form.addEventListener("submit", async (e) => {
          e.preventDefault();
          const query = input.value.trim();
          if (!query) return;

          // reset UI
          answerBox.innerHTML = `<div class="text-skin-muted">Thinking…</div>`;

          try {
            const resp = await fetch("/api/ask", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ query }),
            });
            const data = await resp.json();

            if (!resp.ok) {
              throw new Error(data.error || resp.statusText);
            }

            // Render answer
            const answerHtml = (data.answer || "No answer.").replace(/\n/g, "<br>");

            // Render sources as numbered list
            const sources = Array.isArray(data.sources) ? data.sources : [];
            const listItems = sources.map((s, i) => {
              const label = s.path || asPath(s.meta ?? s.metadata ?? {}) || "(no path)";
              return `<li>[${i + 1}] ${label}</li>`;
            }).join("");

            const sourcesHtml = sources.length
              ? `<div class="mt-4">
                  <div class="text-sm font-semibold mb-1">Sources</div>
                  <ol class="list-decimal pl-5 text-sm leading-relaxed">${listItems}</ol>
                </div>`
              : "";

            answerBox.innerHTML = `<div class="prose prose-neutral dark:prose-invert">${answerHtml}</div>${sourcesHtml}`;
          } catch (err) {
            answerBox.innerHTML = `<div class="text-red-600 text-sm">Error: ${err.message}</div>`;
          }
        });
      </script>
    </section>

    <!-- Optional extra content below -->
    <section class="prose prose-neutral dark:prose-invert max-w-none mt-10">
      <slot />
    </section>
  </main>

  <Footer />
</Layout>

<style>
  /* Make ThesisAsk look like a chat box without changing its JSX */
  .thesis-chat {
    /* no background; border already on parent section */
  }

  /* Normalize headings inside LLM output */
  .thesis-chat .prose h3,
  .thesis-chat .prose h4 {
    @apply mt-3 mb-2;
  }

  /* Input + button inside ThesisAsk → “chat bar” vibe */
  .thesis-chat input[type="text"],
  .thesis-chat input:not([type]),
  .thesis-chat textarea {
    @apply w-full rounded-xl border border-skin-line/60 bg-transparent
           px-3 py-2 outline-none
           focus-visible:ring-1 focus-visible:ring-gray-400 dark:focus-visible:ring-gray-600;
  }

  .thesis-chat button {
    @apply rounded-xl border border-skin-line/60 bg-transparent
           px-4 py-2 transition
           hover:bg-gray-200/40 dark:hover:bg-gray-700/40;;
  }

  /* Typical layout for an input row (if ThesisAsk uses a flex row) */
  .thesis-chat .flex.gap-2,
  .thesis-chat .flex.gap-3 {
    @apply items-center;
  }

  /* If ThesisAsk prints "Answer" and "Sources", space them nicely */
  .thesis-chat h3,
  .thesis-chat h4 {
    @apply text-base font-semibold;
  }
  .thesis-chat ol {
    @apply list-decimal pl-5;
  }

  /* Scrollbar for abstract (only where supported) */
  @supports selector(::-webkit-scrollbar) {
    section[aria-labelledby="abstract-heading"] [role="region"]::-webkit-scrollbar { width: 8px; }
    section[aria-labelledby="abstract-heading"] [role="region"]::-webkit-scrollbar-thumb {
      background: color-mix(in oklab, currentColor 20%, transparent);
      border-radius: 8px;
    }
  }
</style>
